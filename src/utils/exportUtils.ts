import jsPDF from 'jspdf';
import { OptimizationResults, CuttingPlan } from '../types';

export const exportToPDF = (results: OptimizationResults) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();
  let yPosition = 20;

  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Wooden Cutting Plan Optimization Report', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 10;

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text('Generated by Greenstrand Packaging Optimizer', pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 20;

  // Summary
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Optimization Summary', 20, yPosition);
  yPosition += 10;

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  
  const summaryData = [
    ['Material Utilization', `${results.utilization_percentage?.toFixed(1) || 0}%`],
    ['Total Waste', `${((results.total_waste || 0) / 1000000).toFixed(3)} m³`],
    ['Total Cuts', `${results.total_cuts || 0}`],
    ['Cutting Plans', `${results.cutting_plans?.length || 0}`]
  ];

  summaryData.forEach(([label, value]) => {
    doc.text(`${label}:`, 30, yPosition);
    doc.text(value, 120, yPosition);
    yPosition += 8;
  });

  yPosition += 10;

  // Cutting Plans
  if (results.cutting_plans && results.cutting_plans.length > 0) {
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Cutting Plans', 20, yPosition);
    yPosition += 10;

    results.cutting_plans.forEach((plan, index) => {
      // Check if we need a new page
      if (yPosition > pageHeight - 60) {
        doc.addPage();
        yPosition = 20;
      }

      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text(`Plan ${index + 1}: ${plan.part_name}`, 20, yPosition);
      yPosition += 8;

      doc.setFontSize(10);
      doc.setFont('helvetica', 'normal');
      
      const planData = [
        ['Lumber Stock', plan.lumber_name],
        ['Quantity', `${plan.quantity} parts`],
        ['Utilization', `${(plan.utilization * 100).toFixed(1)}%`],
        ['Cuts Required', `${plan.cuts}`],
        ['Waste', `${((plan.waste / 1000000) * 1000).toFixed(2)} liters`],
        ['Lumber Dimensions', `${plan.lumber_dimensions[0]} × ${plan.lumber_dimensions[1]} × ${plan.lumber_dimensions[2]} mm`],
        ['Part Dimensions', `${plan.part_dimensions[0]} × ${plan.part_dimensions[1]} × ${plan.part_dimensions[2]} mm`]
      ];

      planData.forEach(([label, value]) => {
        doc.text(`${label}:`, 30, yPosition);
        doc.text(value, 100, yPosition);
        yPosition += 6;
      });

      yPosition += 10;
    });
  }

  // Footer
  const totalPages = doc.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(`Page ${i} of ${totalPages}`, pageWidth - 30, pageHeight - 10);
    doc.text('Generated by Wooden Cutting Plan Optimizer', 20, pageHeight - 10);
  }

  doc.save('cutting-plan-optimization-report.pdf');
};

export const exportToCSV = (results: OptimizationResults) => {
  if (!results.cutting_plans) return;

  const headers = [
    'Plan ID',
    'Part Name',
    'Lumber Name',
    'Quantity',
    'Utilization %',
    'Cuts Required',
    'Waste (liters)',
    'Lumber Length (mm)',
    'Lumber Width (mm)',
    'Lumber Thickness (mm)',
    'Part Length (mm)',
    'Part Width (mm)',
    'Part Thickness (mm)'
  ];

  const csvData = results.cutting_plans.map((plan, index) => [
    index + 1,
    plan.part_name,
    plan.lumber_name,
    plan.quantity,
    (plan.utilization * 100).toFixed(1),
    plan.cuts,
    ((plan.waste / 1000000) * 1000).toFixed(2),
    plan.lumber_dimensions[0],
    plan.lumber_dimensions[1],
    plan.lumber_dimensions[2],
    plan.part_dimensions[0],
    plan.part_dimensions[1],
    plan.part_dimensions[2]
  ]);

  const csvContent = [
    headers.join(','),
    ...csvData.map(row => row.join(','))
  ].join('\n');

  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', 'cutting-plan-optimization-data.csv');
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};